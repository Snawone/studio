/**
 * @fileoverview Firestore Security Rules for the inventory management application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user roles and ownership.
 * It aims to prevent unauthorized data modification while allowing for flexible data schemas during prototyping.
 *
 * Data Structure:
 * - /onus/{onuId}: Global collection of all ONUs (Optical Network Units).
 * - /shelves/{shelfId}: Collection of physical shelves.
 * - /users/{userId}: Stores user profile information.
 *
 * Key Security Decisions:
 * - Shelves are publicly readable to facilitate browsing the inventory.
 * - ONU create, update, and delete operations require the user to be the owner.
 * - User profiles are strictly private and only accessible by the owning user.
 *
 * Denormalization for Authorization:
 * - The `Onu` entity denormalizes `shelfName` to simplify queries and display in list views.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to shelves, but restricts write access.
     * @path /databases/{database}/documents/shelves/{shelfId}
     * @allow (get, list) Anyone can view shelves.
     * @deny (create, update, delete) No one can create, update, or delete shelves without specific authorization.
     * @principle Public read access with restricted writes.
     */
    match /shelves/{shelfId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add more fine-grained control if needed later

    }

    /**
     * @description Manages access to ONU (Optical Network Unit) documents.
     * @path /databases/{database}/documents/onus/{onuId}
     * @allow (get) Anyone can read ONU details.
     * @allow (list) Anyone can list ONUs.
     * @allow (create) Only users who are authenticated can create ONUs and must set the shelfId and shelfName correctly.
     * @allow (update) Only users who are authenticated can update existing ONUs if they exist.
     * @allow (delete) Only users who are authenticated can delete existing ONUs if they exist.
     * @deny (create) Denies create if the shelfId or shelfName are not correct.
     * @deny (update) Denies updates to the shelfId field, as it is immutable.
     * @principle Public read, owner-only writes, relational integrity.
     */
    match /onus/{onuId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.shelfId is string && request.resource.data.shelfName is string;
      allow update: if isSignedIn() && resource != null && resource.data.shelfId == request.resource.data.shelfId;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Secures user profile data, ensuring only the owner can read and write.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (get) Only the user can retrieve their own profile.
     * @allow (list) Listing users is not allowed.
     * @allow (create) A user can create their profile if the userId matches their auth.uid.
     * @allow (update) Only the user can update their own profile.
     * @allow (delete) Only the user can delete their own profile.
     * @deny (create) Creation is denied if the userId does not match the auth.uid.
     * @deny (update) Update is denied if the userId in the data is changed.
     * @principle Strict user-ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource.data.email == request.resource.data.email;
      allow delete: if isOwner(userId);
    }

    /**
     * @description Helper function to check if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Helper function to check if the requesting user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
  }
}