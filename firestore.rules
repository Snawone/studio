/**
 * @fileoverview Firestore Security Rules for the ONU Inventory Management App.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles,
 * while allowing public read access to ONUs, Shelves, and Technical Groups.
 * Write access to ONUs, Shelves and Technical Groups is open for now,
 * but this should be restricted to authenticated users with some role (e.g., "admin") in the future.
 *
 * Data Structure:
 * - /onus/{onuId}: Collection of ONU/STB devices.
 * - /shelves/{shelfId}: Collection of physical shelves.
 * - /users/{userId}: Collection of user profiles, with each document ID
 *   matching the user's Firebase Auth UID.
 * - /technical-groups/{groupId}: Collection of technical groups.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied.
 * - ONUs and Shelves are publicly readable, but write access is not yet restricted.
 * - The default security posture for ambiguous relationships is strict owner-only access.
 *
 * Denormalization for Authorization:
 *  No denormalization is currently used, but for shared resources, consider
 *  denormalizing a list of authorized UIDs directly onto the document to avoid
 *  complex queries in security rules.
 *
 * Structural Segregation:
 *  Currently, there is no need for structural segregation as all data is either
 *  publicly readable or strictly user-owned.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to ONU (Optical Network Unit) documents.
     * @path /onus/{onuId}
     * @allow (get, list): Any user can read ONU data.
     * @allow (create): Any user can create ONU data.
     * @allow (update): Any user can update ONU data.
     * @allow (delete): Any user can delete ONU data.
     * @deny (create, update, delete): if false; // TODO: Add authentication and role-based authorization.
     * @principle Public read, owner-only writes (pending implementation of authentication and ownership).
     */
    match /onus/{onuId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add authentication and role-based authorization.
    }

    /**
     * @description Controls access to Shelf documents.
     * @path /shelves/{shelfId}
     * @allow (get, list): Any user can read Shelf data.
     * @allow (create): Any user can create Shelf data.
     * @allow (update): Any user can update Shelf data.
     * @allow (delete): Any user can delete Shelf data.
     * @deny (create, update, delete): if false; // TODO: Add authentication and role-based authorization.
     * @principle Public read, owner-only writes (pending implementation of authentication and ownership).
     */
    match /shelves/{shelfId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add authentication and role-based authorization.
    }

    /**
     * @description Controls access to UserProfile documents.
     * @path /users/{userId}
     * @allow (get): Only the owner can read their own profile.
     * @allow (create): Only the user themselves can create their profile, matching their auth UID.
     * @allow (update): Only the owner can update their own profile.
     * @allow (delete): Only the owner can delete their own profile.
     * @deny list: Listing users is not permitted.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to TechnicalGroup documents.
     * @path /technical-groups/{groupId}
     * @allow (get, list): Any user can read TechnicalGroup data.
     * @allow (create): Any user can create TechnicalGroup data.
     * @allow (update): Any user can update TechnicalGroup data.
     * @allow (delete): Any user can delete TechnicalGroup data.
     * @deny (create, update, delete): if false; // TODO: Add authentication and role-based authorization.
     * @principle Public read, owner-only writes (pending implementation of authentication and ownership).
     */
    match /technical-groups/{groupId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add authentication and role-based authorization.
    }

    // ---- Helper Functions ----

    /**
     * @description Checks if the current user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the document, using the userId parameter.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the EXISTING document.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}