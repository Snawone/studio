/**
 * @fileoverview Firestore Security Rules for the ONU Inventory Management Application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user roles and ownership.
 * It aims for strong authorization while maintaining flexibility during the prototyping phase.
 *
 * Data Structure:
 * - /onus/{onuId}: Global collection of ONUs and STBs, publicly readable.
 * - /shelves/{shelfId}: Collection of physical shelves, publicly readable.
 * - /users/{userId}: Stores user profile information, only accessible to the owner.
 * - /technical-groups/{groupId}: Collection of technical groups, publicly readable.
 *
 * Key Security Decisions:
 * - ONUs, Shelves, and Technical Groups are publicly readable to facilitate browsing and discovery.
 *   Writes to these collections are open and should be secured later with an ownership model.
 * - User profiles are strictly private, accessible only to the owning user.
 * - Schema validation is relaxed during prototyping, focusing only on authorization-critical fields.
 *
 * Denormalization for Authorization:
 * N/A - No denormalization is used in this initial ruleset, but should be considered in future iterations.
 * For example, adding a `groupId` field to the `Onu` entity would enable more efficient rules for technician access.
 *
 * Structural Segregation:
 * N/A - Drafts and published content are not explicitly segregated in this data model.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read access to all ONUs and STBs. Write access is open and should be secured later with an ownership model.
     * @path /onus/{onuId}
     * @allow get, list: All users can read ONU data.
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @deny create: No one can create documents.
     * @deny update: No one can update documents.
     * @deny delete: No one can delete documents.
     * @principle Allows public read access to ONU data. Write should be secured later.
     */
    match /onus/{onuId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows read access to all shelves. Write access is open and should be secured later with an ownership model.
     * @path /shelves/{shelfId}
     * @allow get, list: All users can read shelf data.
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @deny create: No one can create documents.
     * @deny update: No one can update documents.
     * @deny delete: No one can delete documents.
     * @principle Allows public read access to shelf data. Write should be secured later.
     */
    match /shelves/{shelfId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages access to user profile information. Only the user can read/write their own profile.
     * @path /users/{userId}
     * @allow get, list: The user can read their own profile.
     * @allow create: The user can create their own profile.
     * @allow update: The user can update their own profile.
     * @allow delete: The user can delete their own profile.
     * @deny get: Other users cannot read this profile.
     * @deny create: Other users cannot create this profile.
     * @deny update: Other users cannot update this profile.
     * @deny delete: Other users cannot delete this profile.
     * @principle Enforces strict user ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows read access to all technical groups. Write access is open and should be secured later with an ownership model.
     * @path /technical-groups/{groupId}
     * @allow get, list: All users can read technical group data.
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @deny create: No one can create documents.
     * @deny update: No one can update documents.
     * @deny delete: No one can delete documents.
     * @principle Allows public read access to technical group data. Write should be secured later.
     */
    match /technical-groups/{groupId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Checks if the current user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     * @example isSignedIn() == true
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     * @param {string} userId The ID of the user to check.
     * @return {boolean} True if the user is the owner, false otherwise.
     * @example isOwner('user123') == true
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the existing owner of the resource.
     * @param {string} userId The ID of the user to check.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     * @example isExistingOwner('user123') == true
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}