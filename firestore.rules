/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict ownership and role-based access control.
 * It is designed for prototyping and rapid iteration, so data shape validation is relaxed.
 *
 * Data Structure:
 * - /onus/{onuId}:  A global collection containing ONU (Optical Network Unit) records.
 * - /users/{userId}: Stores user profile information.
 *
 * Key Security Decisions:
 * - ONU records are publicly readable, but only authenticated users can create, update, or delete them.
 *   - Only the user who created an ONU record can modify or delete it.  This requires the 'Onu' entity to have an `ownerId` property.
 * - User profiles are private; only the authenticated user can read or write their own profile.
 * - Listing of users is disallowed.
 *
 * Denormalization for Authorization:
 * - ONU documents MUST contain an `ownerId` field to determine ownership for write operations.
 *
 * Structural Segregation:
 * - Public ONU data and private user profiles are stored in separate top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to ONU records, but restricts write access to the owner.
     * @path /onus/{onuId}
     * @allow (get, list): Any user can read ONU records.
     * @allow (create): Only authenticated users can create ONU records, and they must set `ownerId` to their UID.
     * @allow (update, delete): Only the owner of the ONU record can update or delete it.
     * @deny (create): If the `ownerId` field in the request does not match the authenticated user's UID.
     * @deny (update, delete): If the user is not the owner of the ONU record.
     * @principle Allows public reads but enforces ownership for writes.
     */
    match /onus/{onuId} {
      allow get, list: if true;

      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;

      allow update, delete: if isExistingOwner(resource.data.ownerId);

    }

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (get, create, update, delete): Only the authenticated user can access their own profile.
     * @deny (get, create, update, delete): If the user ID in the path does not match the authenticated user's UID.
     * @principle Enforces strict user-ownership for profile data.
     */
    match /users/{userId} {
      allow get, create, update, delete: if isOwner(userId);
      allow list: if false;
    }

    // ---- Helper Functions ----

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId The user ID to compare against the authenticated user's UID.
     * @return {boolean} True if the user ID matches the authenticated user's UID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the resource and the resource exists.
     * @param {string} userId The user ID to compare against the authenticated user's UID.
     * @return {boolean} True if the user ID matches the authenticated user's UID and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}