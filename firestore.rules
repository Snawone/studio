/**
 * @fileoverview Firestore Security Rules for the ONU Inventory Management App.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles,
 * while allowing public read access to ONUs, Shelves, and Technical Groups.
 * Writes to ONUs, Shelves and Technical Groups are currently disallowed,
 * pending definition of an ownership or role-based access control mechanism.
 *
 * Data Structure:
 * - /onus/{onuId}: Public collection of ONUs and STBs. Write access is restricted.
 * - /shelves/{shelfId}: Public collection of shelves. Write access is restricted.
 * - /users/{userId}: User-specific profiles. Only the authenticated user can read/write their own profile.
 * - /technical-groups/{groupId}: Public collection of technical groups. Write access is restricted.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to protect user privacy.
 * - ONUs, Shelves and Technical Groups are publicly readable, but write access is restricted,
 *   This assumes no confidential information is stored in these collections. If sensitive data
 *   is added in the future, the rules MUST be updated to restrict read access.
 * - The default security posture for ambiguous relationships is to deny access.
 *
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the 'onus' collection.
     * @path /onus/{onuId}
     * @allow (get, list): Any user can read ONU data.
     * @deny (create, update, delete): No one can create, update, or delete ONU data without authentication.
     * @principle Public read, restricted write.
     */
    match /onus/{onuId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the 'shelves' collection.
     * @path /shelves/{shelfId}
     * @allow (get, list): Any user can read shelf data.
     * @deny (create, update, delete): No one can create, update, or delete shelf data without authentication.
     * @principle Public read, restricted write.
     */
    match /shelves/{shelfId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the 'users' collection.
     * @path /users/{userId}
     * @allow (get, create, update, delete): Only the owner can read, create, update, or delete their own user data.
     * @deny list: User listing is not allowed.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the 'technical-groups' collection.
     * @path /technical-groups/{groupId}
     * @allow (get, list): Any user can read technical group data.
     * @deny (create, update, delete): No one can create, update, or delete technical group data without authentication.
     * @principle Public read, restricted write.
     */
    match /technical-groups/{groupId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}