/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a combination of owner-only and public-read access patterns.
 *
 * Data Structure:
 * - /onus/{onuId}: Public read, owner-only write.
 * - /shelves/{shelfId}: Public read, owner-only write.
 * - /users/{userId}: Private user data, accessible only by the owner.
 * - /technical-groups/{groupId}: Public read, owner-only write.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - ONU and Shelf data are publicly readable but only writable by an owner. This requires the documents to have a defined 'ownerId' field.
 * - Technical Groups data are publicly readable but only writable by an owner. This requires the documents to have a defined 'ownerId' field.
 * - Listing of users is disallowed for privacy.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @returns {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against.
     * @returns {boolean} True if the user is signed in and the UID matches, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     * @param {string} userId - The user ID to compare against.
     * @returns {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the 'onus' collection.
     * @path /onus/{onuId}
     * @allow (get, list): Anyone can read ONU data.
     * @allow (create): Only the owner can create ONU data if the 'ownerId' field matches their UID.
     * @allow (update, delete): Only the owner of an existing ONU can modify/delete it.
     * @deny (create): If the 'ownerId' field does not match the authenticated user's UID.
     * @deny (update, delete): If the user is not the owner or the document doesn't exist.
     * @principle Public read, owner-only write with ownership validation on create, update, and delete.
     */
    match /onus/{onuId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.id == onuId;
      allow update: if isExistingOwner(resource.data.id);
      allow delete: if isExistingOwner(resource.data.id);
    }

    /**
     * @description Rules for the 'shelves' collection.
     * @path /shelves/{shelfId}
     * @allow (get, list): Anyone can read shelf data.
     * @allow (create): Only the owner can create shelf data if the 'ownerId' field matches their UID.
     * @allow (update, delete): Only the owner of an existing shelf can modify/delete it.
     * @deny (create): If the 'ownerId' field does not match the authenticated user's UID.
     * @deny (update, delete): If the user is not the owner or the document doesn't exist.
     * @principle Public read, owner-only write with ownership validation on create, update, and delete.
     */
    match /shelves/{shelfId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.name == shelfId;
      allow update: if isExistingOwner(resource.data.name);
      allow delete: if isExistingOwner(resource.data.name);
    }

    /**
     * @description Rules for the 'users' collection, securing user profiles.
     * @path /users/{userId}
     * @allow (get): Only the user can read their own profile.
     * @allow (create): Only the user can create their own profile (self-registration).  The userId in the path must match the authenticated user's UID.
     * @allow (update): Only the user can update their own profile.
     * @allow (delete): Only the user can delete their own profile.
     * @deny (get): If the user is not the owner.
     * @deny (create): If the user is not creating their own profile (UID mismatch).
     * @deny (update, delete): If the user is not the owner or the document does not exist.
     * @deny (list): Listing all users is not allowed for privacy.
     * @principle Enforces document ownership, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the 'technical-groups' collection.
     * @path /technical-groups/{groupId}
     * @allow (get, list): Anyone can read Technical Group data.
     * @allow (create): Only the owner can create Technical Group data if the 'ownerId' field matches their UID.
     * @allow (update, delete): Only the owner of an existing Technical Group can modify/delete it.
     * @deny (create): If the 'ownerId' field does not match the authenticated user's UID.
     * @deny (update, delete): If the user is not the owner or the document doesn't exist.
     * @principle Public read, owner-only write with ownership validation on create, update, and delete.
     */
    match /technical-groups/{groupId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.name == groupId;
      allow update: if isExistingOwner(resource.data.name);
      allow delete: if isExistingOwner(resource.data.name);
    }
  }
}