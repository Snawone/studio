/**
 * @fileoverview Firestore Security Rules for the ONU Inventory application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user roles and ownership.
 * User-specific data is strictly controlled, while public data is readable by all.
 *
 * Data Structure:
 * - /onus/{onuId}: Stores information about individual ONUs and STBs. Publicly readable, owner-writable.
 * - /shelves/{shelfId}: Stores information about physical shelves. Publicly readable, owner-writable.
 * - /users/{userId}: Stores user profile data. Only accessible by the user themselves.
 * - /technical-groups/{groupId}: Stores information about technical groups and their members.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Public collections (onus, shelves) allow public reads but enforce ownership for writes.
 * - Listing of user documents is denied.
 * - Technical groups are restricted.
 *
 * Denormalization for Authorization:
 * - The `Onu` entity lacks an explicit owner/author field, so we will need to add one in the data to restrict write access to specific users.
 * - The `Shelf` entity lacks an explicit owner/author field, so we will need to add one in the data to restrict write access to specific users.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Secure access to ONUs and STBs. Allows public reads, but restricts writes to the owner.
     * @path /onus/{onuId}
     * @allow (get, list): Any user can read ONU data.
     * @allow (create): Only the ONU creator can create a new ONU with their user ID as the owner.
     * @allow (update, delete): Only the ONU owner can modify or delete it.
     * @deny (create): A non-authenticated user cannot create an ONU.
     * @deny (update, delete): A user cannot modify or delete an ONU they don't own.
     * @principle Allows public read but restricts writes to the owner for ONUs.
     */
    match /onus/{onuId} {
      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid; // CRITICAL: MUST have `ownerId` field on the document.
      allow update: if isSignedIn() && resource.data.ownerId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.ownerId == request.auth.uid && resource != null;
    }

    /**
     * @description Secure access to shelves. Allows public reads, but restricts writes to the owner.
     * @path /shelves/{shelfId}
     * @allow (get, list): Any user can read shelf data.
     * @allow (create): Only the shelf creator can create a new shelf with their user ID as the owner.
     * @allow (update, delete): Only the shelf owner can modify or delete it.
     * @deny (create): A non-authenticated user cannot create a shelf.
     * @deny (update, delete): A user cannot modify or delete a shelf they don't own.
     * @principle Allows public read but restricts writes to the owner for shelves.
     */
    match /shelves/{shelfId} {
      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid; // CRITICAL: MUST have `ownerId` field on the document.
      allow update: if isSignedIn() && resource.data.ownerId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.ownerId == request.auth.uid && resource != null;
    }

    /**
     * @description Secure access to user profiles. Only the user can read/write their own profile.
     * @path /users/{userId}
     * @allow (get): Only the user can read their own profile.
     * @allow (create): A user can create their own profile if the user ID matches.
     * @allow (update): Only the user can update their own profile.
     * @allow (delete): Only the user can delete their own profile.
     * @deny (get): A user cannot read another user's profile.
     * @deny (create): A user cannot create a profile for another user.
     * @deny (update): A user cannot update another user's profile.
     * @deny (delete): A user cannot delete another user's profile.
     * @deny (list): Listing user documents is not permitted.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Secure access to technical groups.
     * @path /technical-groups/{groupId}
     */
    match /technical-groups/{groupId} {
        allow get: if false;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }
}