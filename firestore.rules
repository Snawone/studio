/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of ownership-based access control and public read access where appropriate.
 * Strict ownership is enforced for user profiles, while public read access is granted for the 'onus' and 'shelves' collections.
 *
 * Data Structure:
 * - /onus/{onuId}: Stores information about ONUs and STBs (publicly readable).
 * - /shelves/{shelfId}: Stores information about shelves (publicly readable).
 * - /users/{userId}: Stores user profile information (owner-only access).
 * - /technical-groups/{groupId}: Stores information about technical groups.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to protect user privacy.
 * - Public read access is enabled for 'onus' and 'shelves' to facilitate open data access.
 *
 * Denormalization for Authorization:
 *  - No explicit denormalization is required in this setup as ownership is based on document IDs and public read access is used where applicable.
 *
 * Structural Segregation:
 *  - No structural segregation is used in this ruleset.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the requesting user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the document.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

     /**
      * @description Checks if the requesting user is the owner of the document and it exists.
      * @param {string} userId The user ID to compare against the request's auth UID.
      * @return {boolean} True if the user is the owner and the document exists, false otherwise.
      */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the 'onus' collection.
     * @path /onus/{onuId}
     * @allow (get, list): Any user can read ONU data.
     * @allow (create): Any authenticated user can create an ONU, provided they set the 'authorId' field to their UID.
     * @allow (update, delete): Only the user who created the ONU can update or delete it.
     * @deny (create): An unauthenticated user cannot create an ONU.
     * @deny (update, delete): A non-owner cannot update or delete an ONU.
     * @principle Allows public read access, but restricts write access to the owner.
     */
    match /onus/{onuId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    /**
     * @description Rules for the 'shelves' collection.
     * @path /shelves/{shelfId}
     * @allow (get, list): Any user can read shelf data.
     * @allow (create): Any authenticated user can create an Shelf, provided they set the 'authorId' field to their UID.
     * @allow (update, delete): Only the user who created the Shelf can update or delete it.
     * @deny (create): An unauthenticated user cannot create an Shelf.
     * @deny (update, delete): A non-owner cannot update or delete an Shelf.
     * @principle Allows public read access, but restricts write access to the owner.
     */
    match /shelves/{shelfId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    /**
     * @description Rules for the 'users' collection.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list): Only the user with the matching UID can access their own profile.
     * @deny (get, create, update, delete, list): Any other user attempting to access this profile.
     * @principle Enforces strict user ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the 'technical-groups' collection.
     * @path /technical-groups/{groupId}
     * @allow (get, list): Any authenticated user can read technical group data.
     * @allow (create): Any authenticated user can create a technical group.
     * @allow (update, delete): Any authenticated user can update or delete it.
     * @deny (create): An unauthenticated user cannot create a technical group.
     * @deny (update, delete): A non-owner cannot update or delete a technical group.
     * @principle Allows public read access, but restricts write access to authenticated users.
     */
    match /technical-groups/{groupId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }
  }
}