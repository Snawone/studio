/**
 * @fileOverview Firestore Security Rules for the ONU/STB Inventory App.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure access to user-specific data while allowing public read access to certain collections.
 * It enforces strict ownership for user profiles and owner-only write access for shelves and onus.
 *
 * Data Structure:
 * - /onus/{onuId}: Collection of all ONUs and STBs, with public read access and owner-only writes.
 * - /shelves/{shelfId}: Collection of shelves with public read access and owner-only writes.
 * - /users/{userId}: Collection of user profiles, with strict owner-only access.
 *
 * Key Security Decisions:
 * - Shelves can be listed by any authenticated user.
 * - Onus can be listed by any authenticated user.
 * - User profiles are strictly private; only the owning user can read or write their profile data.
 *
 * Denormalization for Authorization:
 *  - The Shelf documents do not require denormalization for authorization.
 *  - The Onu documents do not require denormalization for authorization.
 *
 * Structural Segregation:
 *  - There is no structural segregation used.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

     /**
      * @description Checks if the authenticated user's ID matches the provided user ID and the resource exists.
      * @param {string} userId - The user ID to compare against.
      * @returns {boolean} True if the user is the existing owner, false otherwise.
      */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /onus/{onuId} collection.
     * @path /onus/{onuId}
     * @allow (get, list): Any authenticated user can read Onu details.
     * @allow (create): Only the owner can create a new Onu, and the `shelfId` must match.
     * @allow (update, delete): Only the owner can modify or delete an existing Onu.
     * @deny (create): A non-authenticated user cannot create a Onu.
     * @deny (update, delete): A non-owner cannot modify or delete an existing Onu.
     * @principle Public Read with Owner-Only Writes: Any authenticated user can read, but only the owner can modify.
     */
    match /onus/{onuId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    /**
     * @description Rules for the /shelves/{shelfId} collection.
     * @path /shelves/{shelfId}
     * @allow (get, list): Any authenticated user can read Shelf details.
     * @allow (create): Only the owner can create a new Shelf.
     * @allow (update, delete): Only the owner can modify or delete an existing Shelf.
     * @deny (create): A non-authenticated user cannot create a Shelf.
     * @deny (update, delete): A non-owner cannot modify or delete an existing Shelf.
     * @principle Public Read with Owner-Only Writes: Any authenticated user can read, but only the owner can modify.
     */
    match /shelves/{shelfId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (get, list): Only the owner can read their own profile. Listing is disallowed.
     * @allow (create): Only the user themselves can create their profile, and the userId must match.
     * @allow (update, delete): Only the owner can modify or delete their own profile.
     * @deny (create): A non-authenticated user cannot create a profile.
     * @deny (update, delete): A non-owner cannot modify or delete another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }
  }
}